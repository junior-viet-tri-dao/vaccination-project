package com.viettridao.vaccination.service.impl;

import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.viettridao.vaccination.dto.request.finance.GiaoDichKhachHangRequest;
import com.viettridao.vaccination.dto.response.finance.GiaoDichKhachHangResponse;
import com.viettridao.vaccination.mapper.GiaoDichKhachHangMapper;
import com.viettridao.vaccination.model.BangGiaVacXinEntity;
import com.viettridao.vaccination.model.BenhNhanEntity;
import com.viettridao.vaccination.model.BienDongKhoEntity;
import com.viettridao.vaccination.model.ChiTietHDEntity;
import com.viettridao.vaccination.model.HoaDonEntity;
import com.viettridao.vaccination.model.LoVacXinEntity;
import com.viettridao.vaccination.model.VacXinEntity;
import com.viettridao.vaccination.repository.BangGiaVacXinRepository;
import com.viettridao.vaccination.repository.BenhNhanRepository;
import com.viettridao.vaccination.repository.BienDongKhoRepository;
import com.viettridao.vaccination.repository.ChiTietHdRepository;
import com.viettridao.vaccination.repository.HoaDonRepository;
import com.viettridao.vaccination.repository.LoVacXinRepository;
import com.viettridao.vaccination.repository.VacXinRepository;
import com.viettridao.vaccination.service.GiaoDichKhachHangService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class GiaoDichKhachHangServiceImpl implements GiaoDichKhachHangService {

	private final HoaDonRepository hoaDonRepository;
	private final ChiTietHdRepository chiTietHdRepository;
	private final BenhNhanRepository benhNhanRepository;
	private final VacXinRepository vacXinRepository;
	private final GiaoDichKhachHangMapper mapper;
	private final LoVacXinRepository loVacXinRepository;
	private final BienDongKhoRepository bienDongKhoRepository;
	private final BangGiaVacXinRepository bangGiaVacXinRepository;

	@Override
	public Page<GiaoDichKhachHangResponse> getAll(Pageable pageable) {
		// 1Ô∏è‚É£ L·∫•y to√†n b·ªô h√≥a ƒë∆°n ch∆∞a b·ªã x√≥a, s·∫Øp x·∫øp theo ng√†y m·ªõi nh·∫•t
		List<HoaDonEntity> hoaDons = hoaDonRepository.findAllByIsDeletedFalse().stream()
				.sorted(Comparator.comparing(HoaDonEntity::getNgayHD, Comparator.nullsLast(Comparator.reverseOrder())))
				.toList();

		// 2Ô∏è‚É£ L·∫•y to√†n b·ªô b·∫£ng gi√° v·∫Øc xin m·ªôt l·∫ßn
		List<BangGiaVacXinEntity> bangGiaList = bangGiaVacXinRepository.findAll();

		// 3Ô∏è‚É£ Map t·ª´ng chi ti·∫øt h√≥a ƒë∆°n th√†nh DTO
		List<GiaoDichKhachHangResponse> dtoList = hoaDons.stream().flatMap(
				hd -> hd.getChiTietHDs().stream().filter(ct -> !Boolean.TRUE.equals(ct.getIsDeleted())).map(ct -> {
					// L·∫•y gi√° m·ªõi nh·∫•t theo vacXin c·ªßa chi ti·∫øt
					BangGiaVacXinEntity bangGia = bangGiaList.stream()
							.filter(bg -> bg.getVacXin().getId().equals(ct.getVacXin().getId()))
							.max(Comparator.comparing(BangGiaVacXinEntity::getNgayTao,
									Comparator.nullsLast(Comparator.naturalOrder())))
							.orElse(null);

					// Mapper chi ti·∫øt h√≥a ƒë∆°n + h√≥a ƒë∆°n
					return mapper.toResponse(hd, ct);
				})).toList();

		// 4Ô∏è‚É£ Ph√¢n trang th·ªß c√¥ng
		int start = (int) pageable.getOffset();
		int end = Math.min(start + pageable.getPageSize(), dtoList.size());
		List<GiaoDichKhachHangResponse> content = dtoList.subList(start, end);

		return new PageImpl<>(content, pageable, dtoList.size());
	}

	@Override
	@Transactional(readOnly = true)
	public GiaoDichKhachHangResponse getByMaHoaDon(String soHoaDon) {
		HoaDonEntity hoaDon = hoaDonRepository.findBySoHoaDonAndIsDeletedFalse(soHoaDon)
				.orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n"));

		ChiTietHDEntity chiTiet = hoaDon.getChiTietHDs().stream().filter(ct -> !Boolean.TRUE.equals(ct.getIsDeleted()))
				.findFirst().orElseThrow(() -> new IllegalArgumentException("Kh√¥ng c√≥ chi ti·∫øt h√≥a ƒë∆°n"));

		return mapper.toResponse(hoaDon, chiTiet); // <- ch·ªâ 2 tham s·ªë
	}

	@Transactional(readOnly = true)
	public int getGiaTheoMaVacXin(String maCode) {
		return bangGiaVacXinRepository.findByVacXinMaCodeOrderByHieuLucTuDesc(maCode).stream().findFirst()
				.map(BangGiaVacXinEntity::getGia).orElse(0);
	}

	@Transactional
	@Override
	public void create(GiaoDichKhachHangRequest request) {
		// 1Ô∏è‚É£ L·∫•y kh√°ch h√†ng ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
		BenhNhanEntity benhNhan = benhNhanRepository.findByHoTen(request.getTenKhachHang()).orElseGet(() -> {
			BenhNhanEntity newBn = new BenhNhanEntity();
			newBn.setHoTen(request.getTenKhachHang());
			return benhNhanRepository.save(newBn);
		});

		// 2Ô∏è‚É£ L·∫•y v·∫Øc xin
		VacXinEntity vacXin = vacXinRepository.findByMaCode(request.getMaVacXin())
				.orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y v·∫Øc xin"));

		// üîé L·∫•y gi√° m·ªõi nh·∫•t t·ª´ b·∫£ng gi√°
		int donGia = bangGiaVacXinRepository.findByVacXinIdOrderByHieuLucTuDesc(vacXin.getId()).stream().findFirst()
				.map(BangGiaVacXinEntity::getGia)
				.orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y gi√° cho v·∫Øc xin"));

		// 3Ô∏è‚É£ T·∫°o h√≥a ƒë∆°n
		HoaDonEntity hoaDon = new HoaDonEntity();
		hoaDon.setBenhNhan(benhNhan);
		hoaDon.setSoHoaDon(request.getSoHoaDon());
		hoaDon.setNgayHD(request.getNgayHD());
		hoaDon.setIsDeleted(false);
		hoaDon.setTongTien(0); // t·∫°m
		hoaDonRepository.save(hoaDon);

		// 4Ô∏è‚É£ Chu·∫©n b·ªã xu·∫•t: t·ªïng c·∫ßn xu·∫•t v√† t·ªïng ti·ªÅn
		int soLuongCanXuat = request.getSoLuong();
		int tongTien = 0;

		// 5Ô∏è‚É£ L·∫•y c√°c l√¥ theo hanSuDung tƒÉng d·∫ßn
		List<LoVacXinEntity> dsLo = loVacXinRepository.findByVacXinAndSoLuongGreaterThanOrderByHanSuDungAsc(vacXin, 0);

		for (LoVacXinEntity lo : dsLo) {
			if (soLuongCanXuat <= 0)
				break;

			int soLuongTru = Math.min(lo.getSoLuong(), soLuongCanXuat);
			int thanhTien = donGia * soLuongTru;

			// ‚û°Ô∏è T·∫°o chi ti·∫øt h√≥a ƒë∆°n
			ChiTietHDEntity chiTiet = new ChiTietHDEntity();
			chiTiet.setHoaDon(hoaDon);
			chiTiet.setVacXin(vacXin);
			chiTiet.setLoVacXin(lo);
			chiTiet.setSoLuong(soLuongTru);
			chiTiet.setDonGia(donGia);
			chiTiet.setThanhTien(thanhTien);
			chiTiet.setIsDeleted(false);
			chiTietHdRepository.save(chiTiet);

			// ‚û°Ô∏è Bi·∫øn ƒë·ªông kho
			BienDongKhoEntity bienDong = new BienDongKhoEntity();
			bienDong.setLoVacXin(lo);
			bienDong.setLoaiBD(BienDongKhoEntity.LoaiBienDong.XUAT);
			bienDong.setSoLuong(soLuongTru);
			bienDong.setMaHoaDon(hoaDon.getSoHoaDon());
			bienDong.setLoaiHoaDon(BienDongKhoEntity.LoaiHoaDon.KHACH);
			bienDong.setNgayThucHien(LocalDateTime.now());
			bienDongKhoRepository.save(bienDong);

			// ‚û°Ô∏è C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng l√¥
			lo.setSoLuong(lo.getSoLuong() - soLuongTru);
			loVacXinRepository.save(lo);

			// ‚û°Ô∏è C·ªông d·ªìn ti·ªÅn v√† gi·∫£m s·ªë l∆∞·ª£ng c·∫ßn xu·∫•t
			tongTien += thanhTien;
			soLuongCanXuat -= soLuongTru;
		}

		if (soLuongCanXuat > 0) {
			throw new IllegalArgumentException("Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho");
		}

		// 6Ô∏è‚É£ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
		hoaDon.setTongTien(tongTien);
		hoaDonRepository.save(hoaDon);
	}

	@Transactional
	@Override
	public void update(GiaoDichKhachHangRequest request) {
		// 1Ô∏è‚É£ L·∫•y h√≥a ƒë∆°n theo s·ªë h√≥a ƒë∆°n
		HoaDonEntity hoaDon = hoaDonRepository.findBySoHoaDonAndIsDeletedFalse(request.getSoHoaDon())
				.orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n"));

		// 2Ô∏è‚É£ L·∫•y chi ti·∫øt h√≥a ƒë∆°n (gi·∫£ s·ª≠ m·ªói h√≥a ƒë∆°n 1 chi ti·∫øt)
		ChiTietHDEntity chiTiet = hoaDon.getChiTietHDs().stream().filter(ct -> !Boolean.TRUE.equals(ct.getIsDeleted()))
				.findFirst().orElseThrow(() -> new IllegalArgumentException("Kh√¥ng c√≥ chi ti·∫øt h√≥a ƒë∆°n"));

		// 3Ô∏è‚É£ Ki·ªÉm tra xem c√≥ thay ƒë·ªïi v·∫Øc xin ho·∫∑c s·ªë l∆∞·ª£ng
		boolean vacXinChanged = !chiTiet.getVacXin().getMaCode().equals(request.getMaVacXin());
		boolean soLuongChanged = chiTiet.getSoLuong() != request.getSoLuong();

		if (!vacXinChanged && !soLuongChanged) {
			// Kh√¥ng c√≥ g√¨ thay ƒë·ªïi ‚Üí kh√¥ng update
			return;
		}

		// 4Ô∏è‚É£ L·∫•y v·∫Øc xin m·ªõi (n·∫øu thay ƒë·ªïi)
		VacXinEntity vacXin = vacXinRepository.findByMaCode(request.getMaVacXin())
				.orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y v·∫Øc xin"));

		chiTiet.setVacXin(vacXin);

		// 5Ô∏è‚É£ L·∫•y gi√° m·ªõi nh·∫•t t·ª´ b·∫£ng gi√°
		BangGiaVacXinEntity bangGia = bangGiaVacXinRepository.findByVacXinIdOrderByHieuLucTuDesc(vacXin.getId())
				.stream().findFirst()
				.orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y gi√° cho v·∫Øc xin n√†y"));

		int donGia = bangGia.getGia();

		// 6Ô∏è‚É£ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng, gi√° v√† th√†nh ti·ªÅn
		chiTiet.setSoLuong(request.getSoLuong());
		chiTiet.setDonGia(donGia);
		chiTiet.setThanhTien(donGia * request.getSoLuong());
		chiTietHdRepository.save(chiTiet);

		// 7Ô∏è‚É£ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn h√≥a ƒë∆°n
		hoaDon.setTongTien(chiTiet.getThanhTien());
		hoaDonRepository.save(hoaDon);
	}

	@Transactional
	@Override
	public void deleteByMaHoaDon(String soHoaDon) {
		HoaDonEntity hoaDon = hoaDonRepository.findBySoHoaDonAndIsDeletedFalse(soHoaDon)
				.orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n"));

		hoaDon.getChiTietHDs().forEach(ct -> {
			ct.setIsDeleted(true);
			chiTietHdRepository.save(ct);
		});

		hoaDon.setIsDeleted(true);
		hoaDonRepository.save(hoaDon);
	}

	@Transactional
	@Override
	public void softDeleteByLoVacXin(LoVacXinEntity loVacXin) {
		List<ChiTietHDEntity> list = chiTietHdRepository.findAllByLoVacXinAndIsDeletedFalse(loVacXin);
		list.forEach(ct -> ct.setIsDeleted(true));
		chiTietHdRepository.saveAll(list);
	}

	@Transactional
	@Override
	public void softDeleteByMaHoaDon(String soHoaDon) {
		HoaDonEntity hoaDon = hoaDonRepository.findBySoHoaDonAndIsDeletedFalse(soHoaDon)
				.orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n"));

		hoaDon.getChiTietHDs().forEach(ct -> {
			ct.setIsDeleted(true);
			chiTietHdRepository.save(ct);
		});

		hoaDon.setIsDeleted(true);
		hoaDonRepository.save(hoaDon);
	}
}
